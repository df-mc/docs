[[{"l":"Welcome","p":["Welcome to the Dragonfly wiki.","This wiki is the main source of information for developers looking to start developing servers and libraries using Dragonfly. The Dragonfly Docs is open to contributions. Pull Requests and issues may be opened at our docs repository."]},{"i":"what-is-dragonfly","l":"What is Dragonfly?","p":["Dragonfly is a server software for Minecraft: Bedrock Edition (Android, iOS, Windows 10 and more). Written in Go, it allows simplistic code, super-fast startup and great performance and scaling.","Dragonfly can and is being used on production, but it's certainly not the most battle-tested. Please feel free to open issues for any bugs or features that you'd like to see addressed."]},{"i":"questions-or-need-help","l":"Questions or need help?","p":["Feel free to join our Discord server to talk."]}],[{"l":"Getting Started","p":["Since Dragonfly is still in its early stages, there aren't any prebuilt executables. These may be provided when Dragonfly becomes more stable. Instructions and a tutorial video can be found below."]},{"l":"Installation as library","p":["The following commands assume you have created a new directory for your Go project, and you are trying to import dragonfly."]},{"l":"Installation of the latest commit","p":["The following commands download the latest dragonfly commit and run it."]},{"l":"Video"}],[{"l":"Philosophy","p":["While this section may seem extremely redundant and not needed, it's important to understand that most Dragonfly users come from other popular softwares - such as Pocketmine-MP and Nukkit.","Although Dragonfly aims to serve the same purpose as these other softwares, they couldn't be more different in how we have to create software using them.","It's important that at the end of this section, the main group of users of Dragonfly, takeaway this important lessons:","For those who have used other softwares and are proficient in its respective language but are new to both Go and Dragonfly:","Drop all the good practices you assumed were 'good', most will not apply in the context of Go.","If you do not fall in this group, you can feel free to skip this section, but it's still a good read nonetheless"]}],[{"i":"what-is-dragonfly","l":"What is Dragonfly?","p":["Dragonfly is a server software for Minecraft that's powered by Go."]},{"l":"Intended Audiences","p":["Dragonfly is intended to be used by developers rather than server owners, unlike other server software, most of the behavior has to be controlled by code."]},{"l":"Differences from other server software","p":["Dragonfly is a library that has to be included by another program, where the actual logic would be controlled, altered and extended by the main program.","This differs in contrast to other Plug and Play server software, where the server exists as the main program that which includes user-provided plugins that allow the server's behavior to be modified.","Dragonfly on the other hand works as a library as opposed to a Plug and Play server; therefore, it has no plugin system built-in."]},{"l":"Overall Philosophy","p":["The following sections will go into a deeper dive into the philosophy and common practice when using Dragonfly (and Go). If you are new to Dragonfly and are familar with other softwares (such as Pocketmine-MP or Nukkit), it's strongly recommended to read over these sections in order not to fall into bad design patterns and pitfalls that could jeopardize your projects."]},{"l":"Community","p":["If you have any other questions, come join us in the Bedrock Gophers Discord server!"]}],[{"l":"Language","p":["If you are a developer from softwares like Pocketmine-MP and Nukkit, you are primarily used to programming in an Object-Oriented Programming (OOP) Language (e.g PHP, Java, Kotlin).","One of the biggest problems that you must overcome is to drop the concept of OOP in exchange for Go's more functional style.","Although you are probably akinned to the extremely organized and strict nature of OOP organization, these concepts simply do not work with the good practices of Go and will often backfire at you. This in turn makes your once elegant Go code, into something not so much.","In the next section, we will give a few examples of examples of paradigms you are used to in Java/PHP, make their bad equivalents in Go, explain why they are bad, and then show the best way to actually implement them in Go!"]}],[{"l":"Encapsulation","p":["Encapsulation is simply the idea of bundling your data into a class. Consider the following example:","Java:","PHP:","Above are examples of encapsulating a name (with respect to a User class) in both Java/PHP. Below is the INCORRECT implementation of this concept in Go.","There are a few problems that we need to point out here:","Not utilizing the pointer receiver (* User). In Go, we must add the * operator in front of our struct function in order to be able to edit the variable.","The idea of getters and setters do exist in Go, but they aren't the typical way that OOP languages use them. In Go convention, a getter function is typically named as just the property that it returns (so in this case, just, Name()) and the setter function remains the same.","We don't want to always use an unexported field. In Go, fields with lowercase names are unexported (private), however, if we are not using the field for really any type of validation and are just using it at its face value (e.g there is no other function within User using it), then we do not need to keep it unexported and guarded under a function and instead can just make it exported (public) by naming it Name","With these changes in mind, our OOP-inspired Go code becomes the following:","However, if the Name field must be used in some type of other functional logic in some function for User, then utilize the original Go code, except with the name of the getter set to Name() as below (along with the pointer receiver):"]}],[{"l":"Inheritance"}],[{"l":"Object Coupling"}],[{"l":"Polymorphism"}],[{"l":"Software","p":["Dragonfly has a very different approach when its paradigms - both internal and externally-exposed APIs.","It's important to understand the differences between Dragonfly's approach to tackling common software practices when it comes to creating a server. Mainly, most differences boil down to the event-driven component of programming a software.","Later in the section, we will also go into some of the software pitfalls that can occur when you approach using Dragonfly in a more Pocketmine-MP/Nukkit approach (similar to how)","Although you may be keen to be critical of how things are done in Dragonfly, understasnd that the approach is meant to both follow Go standards as well as making your code the most extensible and performant as possible. We will cover criticisms to Dragonfly's approach and why things are done the way we are in this section as well."]}],[{"l":"Abstracted Packets","p":["Dragonfly believes in abstraction of the packet layer, thus it does not provide any method to access the underlying packet layer, if there's a missing API for something you want, you are free to open an issue or a pull request."]},{"l":"Rebuttal","p":["Some counter this idealogy and say:","Allowing for free use of packets makes more sense because the software should allow the full capabilties over the network!","While this is certainly a good point, it's key to understand that there is no reason to access a network layer when you can make the abstraction at the API level.","For instance, if you want the ability to send a scoreboard (which already exists in Dragonfly, this is an example), instead of hackishly listening to packets and sending them, implement the internal Dragonfly code to implement them at the API level.","This in turn will make these features more accessible to other users as they are baked in, rather than decoupled into other peoples' implementations using packets.","Overall, the idea against a packet system can be summarized into this message that states:","\"Using packets is like connecting your phone charger to the power line directly while you have power sockets at your home.\""]},{"l":"External Package","p":["The Bedrock Gophers offer a package called intercept which acts as a packet handler in Dragonfly by using unsafe features of Go to access the packet layer.","You should only use the package if the behavior you're trying to program is essentially a) impossible to do in vanilla Dragonfly or b) not implemented yet in vanilla Dragonfly."]}],[{"l":"Event System","p":["Dragonfly does not have a traditional event handling system, instead a per-player handler can be registered to handle all actions originated from said player.","If this is confusing to you, below are diagrams that may help you better you discern the differences between the typical event system you are used to in softwares like Pocketmine-MP/Nukkit and Dragonfly."]},{"i":"typical-event-system-pocketmine-mpnukkit","l":"Typical Event System (Pocketmine-MP/Nukkit)","p":["In the diagram, you can see that for every action a player does (e.g chat, move, swing, etc.), it is handled by a single global (or conglomerate of multiple) handler that does not change for every player.","Simply put, the server is just handling events from the player and there is no dynamic behavior for different handling unless its specifically branched off in your listener."]},{"i":"per-player-event-system-dragonfly","l":"Per-Player Event System (Dragonfly)","p":["In the diagram, you can see that there are multiple players in this example, some with different or the same handlers. Each handler is actually mounted onto the player as a field (think of making an eventHandler field of type EventHandler in Pocketmine-MP/Nukkit) and runs each event of the handler in it's own Go routine (green thread).","This system brings in more modularity to your code, as you can design handlers to your own liking and decoupling logic away from larger handlers. A downside to this system is that it makes it more difficult to utilize reusable or global event-handler code, however, these have solutions that we will talk about in a later section.","Overall, the main takeaway you should understand is that event handlers are mounted on the player instance itself, so you will be able to change the handler at any point in the server life-cycle to fit the need of whatever your player is doing, consider the follow Go pseudocode:"]}],[{"l":"Overengineering"}],[{"l":"Redundancy"}],[{"l":"Tasks","p":["Tasks and closures are by far one of the most simplified features when it comes to using Go/Dragonfly. With the combined ability of Go routines, tickers, channels, and the time package, developers are able to create every kind of needed task (simple, delayed, repeating, and delayed repeating) without having to call extra abstractions like in other softwares."]},{"l":"Repeating Tasks","p":["Consider you want to create a repeating, synchronous task in Pocketmine-MP"]},{"i":"announcementtaskphp","l":"AnnouncementTask.php","p":["This is simply a task that will broadcast a certain message to the server. Since we want to make it repeating, somewhere in our plugin's entry point, we would write:","This will simply run the announcement task every minute.","Consider the pitfalls to this solution, however. We had to create a class and then use a long property and function call map in order to even execute our task.","Furthermore, since we are using a synchronous tasks, any blocking code (there isn't any in this example) will clog up the main thread. In this case, we would use Pocketmine-MP's AsyncPool and AsyncTask, but the prior pitfalls still arise.","Lastly, we know that task is always going to run for the full cycle of the program. It seems very redundant to have to manually schedule this task when you know it's always going to happen.","In the following Dragonfly/Go code, we will be using a combination of Go routines and tickers to help with the above problems.","Wow! We were able to get a task that took up 2 files and several lines of code into something that fits in just 10 lines. Let's analyze how this code uses Go conventions/packages to make the code concise.","The utilization of the init function essentially \"lazy-loads\" the logic in the function without any sort of manual scheduling. This is useful in cases where you know that the task will repeat for the full life-cycle of your program","Note: The package containing the file you're init function is in much be imported somewhere in order for the function to be called!","Using the Go routine above allows the code to be executed on a separate thread and have the rest of the program run freely on the main thread. In a sense, you can \"think\" of this as a more light-weight option to AsyncTask(but not completely as there is a huge difference internally) as it will allow the execution of the code off the main thread.","The use of the Ticker allows the developer to control the flow of the task as well as visually be able to see the iterative approach to tasks in a clean manner. In this example, we defer the end of the task (simply, it will stop at the end of the thread or program life-cycle) and then we iterate over the ticker's channel. This iteration cycle will happen however long you specified the ticker's interval to be (in this case, a minute)."]},{"l":"Delayed Tasks","p":["TODO"]}],[{"l":"Worlds","p":["As of v0.10, all code that modifies worlds must be executed from within a transaction (*world.Tx) to ensure synchronisation with the world. Transactions can be run as such:","A *world.Tx is only valid inside of this transaction function. Using it outside of this scope (e.g. on a different goroutine) is not permitted:","Trying to use the *world.Tx in these invalid cases leads to the following panic:","w.Exec() returns a -chan struct{} which may be used to wait for the finishing of the transaction's execution. In cases where code needs to await a transaction, it can do so as such:"]},{"l":"Entities and transactions","p":["Following the introduction of transactions to worlds, entities have undergone some significant changes as well. A new *world.EntityHandle was introduced which is a persistent identifier of a world.Entity. Meanwhile, world.Entity s are now only valid in the context of a transaction. Let us examine an example:","In this example, a snowball is created as a *world.EntityHandle. As explained before, these handles are persistent and always valid. The world.Entity returned by tx.AddEntity(), however, is only valid while the transaction is active. This means that snowball in this example is no longer valid when the transaction ends.","If we were to correctly get access to the snowball again using the handle we have stored, we can open a new transaction using the following:","ExecWorld() obtains the entity's world in a thread-safe way and opens a transaction in it when it does. If the entity is not added to a world, ExecWorld() will block until the entity is added to a world and run the transaction function once it is. If the entity is closed before ExecWorld() is called, ExecWorld() will return false and not run the transaction function.","In short: Avoid storing world.Entity implementations (includes *player.Player) in any field that lasts longer than a transaction. Instead, store a *world.EntityHandle and open a new transaction when needed. Another consequence is that world.Entity implementations, such as *player.Player, should not be compared for equality with ==. Instead, compare their respective handles by checking, e.g., if (world.Entity).H() == (*player.Player).H()."]},{"l":"Handlers and transactions","p":["Handlers, such as player.Handler and world.Handler, have the respective *player.Player/*world.Tx passed to them in an event.Context[T], like so:","As explained in the section Entities and transactions, these values are not valid when moved to another goroutine or when stored in a field of the Handler."]},{"l":"Updating from older versions","p":["Libraries and servers using Dragonfly written before v0.10 require several changes. Some of the biggest changes and updating suggestions are listed below."]},{"l":"Transactions","p":["Editing worlds now requires opening a transaction in advance. This means that code such as this:","must be refactored to be run in a transaction like this:","Most places, such as methods in world.Block implementations, will now have a*world.Tx passed around instead of a *world.World and should otherwise require relatively few changes, other than changing *world.World=> *world.Tx.","Pay additional attention in places where your code creates goroutines or calls time.AfterFunc(), because these require a new transaction."]},{"l":"Handlers","p":["Storing a *player.Player in a field of the Handler is no longer valid, as player entities don't last the entire lifetime. Instead, the player is now passed in all handle functions as shown in Handlers and transactions. Consider storing only the data necessary in your handler and, if needed, store the *world.EntityHandle of the player instead of the player itself.","As a result of these transaction changes, handlers are now entirely thread safe. This means that data stored in handlers, unless accessed from different goroutines elsewhere, does not need to be protected using e.g. a mutex."]},{"l":"Commands","p":["Commands now have a transaction passed to them too, and players/entities returned by a []Target parameter will only include those from the same world as the caller of the command."]},{"l":"Forms","p":["Like with commands, forms are opened within a transaction now. The transaction is passed to all Submit methods and Close methods."]},{"l":"Accepting players","p":["Accepting players was changed from the following:","to:","Like in other places, using p outside of this context (different goroutine or time.AfterFunc()) is not permitted."]},{"l":"Troubleshooting","p":["You might run into some issues trying to update to the new world transactions. Here are some of the most common issues and what you can do to solve them:"]},{"i":"panic-worldtx-use-of-transaction-after-transaction-finishes-is-not-permitted","l":"panic: world.Tx: use of transaction after transaction finishes is not permitted:","p":["This panic happens when a transaction is used after it is closed. Common causes for this include using entities outside of transactions, e.g. when storing *player.Player as opposed to its *world.EntityHandle. Solving this issue involves making sure that a *world.Tx is not used outside a transaction. This also includes entities that implement world.Entity, such as *player.Player. Instead, store their *world.EntityHandle, which is persistent, unique and safe for use outside a transaction."]},{"i":"deadlockfreeze-while-opening-a-transaction","l":"Deadlock/freeze while opening a transaction:","p":["You might run into deadlocks trying to create world transactions. This results from opening a transaction from within a transaction. Let's say we have the following function:","This function will cause a deadlock because the presence of a *player.Player, which implements world.Entity, means that this function is called while a transaction is already opened. Because we wait for the new transaction we create to finish (- w.Exec()), a deadlock is created. There are two ways to solve this:","If, in this example, w is always equal to the player's world, we can simply do the following:","If, on the other hand, w is not guaranteed to be the player's world, we can simply remove the arrow so that we do not wait for the transaction to end inside the current transaction:","Now, the transaction is run asynchronously once our current transaction ends."]},{"l":"Multi-world Managers","p":["TODO"]},{"l":"Conclusion","p":["Transactions help prevent many race conditions and make it easier to optimise particularly hot code paths. They do make code slightly more complicated and you may have questions about them. Do not hesitate to ask any questions in the Bedrock Gophers Discord."]}],[{"l":"Project Setup","p":["The following guides will help you set up a server from scratch using Dragonfly among the popular gamemodes people tend to make Minecraft servers for.","Dragonfly is a bit daunting, with essentially all of the organization and file system needed to be done by the user. Furthermore, with no large ecosystem of previous code to reuse, it's hard to to even know where to begin. This setup tutorial will allow you get the typical base-code that's been used for quite some time on older Dragonfly projects and should be fairly beginner friendly."]},{"l":"Installing Go and Dragonfly","p":["If you have not already done so, please install both Go and Dragonfly. You can refer to the Getting Started section to do so:","Project Setup"]},{"l":"Installing MongoDB","p":["Most servers require the persistence of data, which is what a database is for. In this example, we will be using MongoDB. Coming from other softwares, you may be more familar with SQL databases like SQLite, MySQL, or PostgreSQL. The Go MongoDB library delivers an extremely beginner friendly API (which is typesafe and provides autocomplete) as well as a performant database driver.","Below are the downloads for MongoDB on the three popular operating systems:","Operating System","Link","Windows","https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/","Linux","https://www.mongodb.com/docs/manual/administration/install-on-linux/","MacOS","https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-os-x/"]},{"l":"Installing Gophig","p":["For the following projects, we will be using gophig to load our own custom configuration files for our server. To install, simply run:"]},{"l":"Project Entry Point","p":["We are now ready to create our Dragonfly project. Below, is a main.go entry point file that will be the file to start our program. Create a main.go file and use the following code:"]},{"l":"Custom Configuration File","p":["We are not done quite yet! You will see that your program will error because we have not created our file yet to handle the custom configuration. To do so, create a folder called minecraft and in it, a file called config.go and use the following code:"]},{"l":"Starting the Server","p":["Great! Now we have created our initial entry point file and custom configuration struct. With the minecraft.Config struct, you can add pretty much any data point you want that falls under the basic Go types (as well as combine them into a struct like the example above).","When your server runs, the server will automatically load and add any empty fields (or create the file if it does not exist), and you will be able to use these configurations during your program life cycle.","We're now ready to start our server! Simply run the following command in your terminal, add a server in your Minecraft tab with the address of 127.0.0.1 and port 19132(or whatever you specified in your config.toml) and you should be able to join the server!","You just made your first basic Dragonfly server! With this is mind, you should now be able to traverse through the next few sections to see real world examples of servers and how to organize your file system as well learning about control flow through your program with events and other tasks."]},{"l":"Further Information","p":["Please note that on the more specific tutorials on programming specific gamemodes, you will most likely modify certain behaviour in both the entry point file and the configuration file. Understand and analyze the behaviour of every chunk of code within these files so you have understanding of why you will change code in a later section"]}],[{"l":"Factions"}],[{"l":"Minigames"}],[{"l":"Practice"}],[{"l":"Todo"},{"l":"TODO"},{"l":"Language","p":["Inheritance","Object Coupling","Polymorphism"]},{"l":"Software","p":["Overengineering","Redudancy"]},{"l":"Guides","p":["Database Setup (Code)","Practice","Minigames","Factions"]}],[{"l":"Community"}],[{"l":"Frequently Asked Questions"},{"i":"is-dragonfly-ready-for-use","l":"Is Dragonfly ready for use?","p":["Dragonfly is currently in its early developmental phases. While you certainly can use it, there will be things that are lacking or unimplemented. Ultimately, Dragonfly's goal is to get close to as vanilla Minecraft as possible, features/issues for these are tracked in the following Github Issue. If you encounter any bugs or would like to see a feature implemented, feel free to open an issue or pull request."]},{"i":"how-do-i-add-plugins","l":"How do I add plugins?","p":["Due to the way Dragonfly functions, it doesn't support plugins. Dragonfly is a library that has to be included by another program, where the actual logic would be controlled, altered and extended by the main program."]},{"i":"how-do-i-update-my-dragonfly-server","l":"How do I update my Dragonfly server?","p":["If you're using Dragonfly as a library, you can simply do:","This will download the latest stable Dragonfly tag. If you're targeting a specific tag, try:","You can also target a specific commit by using the same command by replacing the tag placeholder with the commit hash."]}],[{"l":"Projects","p":["A collection of community projects related to Dragonfly."]},{"l":"Libraries"},{"l":"API Clients","p":["Libraries implementing clients for APIs frequently used for Minecraft servers.","vote- Go library for accessing the minecraftpocket-servers.com voting API."]},{"l":"Economy","p":["Libraries for integrating economy into a server","economy- A simple, fast and extensible economy api for Dragonfly."]},{"l":"Entities","p":["Libraries for simplifying work with and adding features to entities.","npc- NPC library for Dragonfly."]},{"l":"Event Handling","p":["Libraries to improve or extend event handling.","Peex- Multihandler library with player components","vhandler- Add multiple player and world handler"]},{"l":"Music","p":["Libraries to play music within a server.","nbs- A note block song parser for legacy Note Block Studio and Open Note Block Studio."]},{"l":"Text Formatting","p":["Libraries for formatting text.","strutils- Library for text centering and color code cleaning."]},{"l":"World Edit","p":["Libraries for editing worlds on large scales.","structure- Structure parsing and writing library for Dragonfly.","schematic- Schematic parsing library for Dragonfly."]},{"l":"Servers"},{"l":"Building Servers","p":["Server implementations related to enhancing building.","plots- Minecraft plots server written using Dragonfly."]},{"l":"Tools","p":["Stand-alone tools that can be used for working with Dragonfly."]},{"l":"Development Resources","p":["Bedrock Gophers- An organization full of useful repositories and utilities designed for Dragonfly"]}],[{"l":"Changelogs"}],[{"i":"v0100","l":"v0.10.0","p":["Released January 5th, 2025.","This version introduces significant changes to Dragonfly, making world access happen through synchronised transactions. More information on this system can be found at the wiki page for world transactions","Dragonfly v0.10.0 requires Go 1.23 or above."]},{"l":"Changes"},{"l":"block","p":["Added pale oak blocks.","Added resin blocks.","Added end rods.","Added pink petals.","Added vines.","Decorated pots can now have sherds and be filled with a stack of items.","Leaves now have a chance to drop sticks when breaking.","Crops now drop their respective seeds/items when \"popping off\" as a result of low light levels.","Fixed door placement consuming 3 door items.","Sugar canes now also break without water nearby on (SugarCane).RandomTick.","Explosions now correctly calculate exposure for entities behind blocks with non-full bounding boxes.","Explosions from TNT now drop 100% of drops.","Fixed fire created by lava or lightning not updating.","Fixed note blocks retaining their last note when dropped.","Fixed dead bushes not being placeable on grass/mud."]},{"i":"blockcube","l":"block/cube","p":["Rotation has a new Neg method that returns the negative of both Rotation values, used for projectiles."]},{"l":"cmd","p":["Command names and aliases now must be lowercase.","Target selectors ([]Target) now only yields players from the same world. This is a consequence of the world transactions and is likely to be reverted in a future Dragonfly version.","The *world.Tx in which a command is run is now passed to (Runnable).Run."]},{"l":"entity","p":["Fixed splash/lingering potions and bottles o' enchanting throwing velocity not matching vanilla.","Fixed projectile knockback to reflect projectile velocity rather than collision position."]},{"i":"entityeffect","l":"entity/effect","p":["Effects now start their tick count the moment they are added to *entity.EffectManager. This means that effects now always tick predictably and consistently. (#944)","Changed effect types to variables. Poison{} is now Poison.","Potency fields were removed from InstantHealth and InstantDamage, instead having been added to a new NewInstantWithPotency function.","Fixed effect colours not matching the latest Minecraft version."]},{"l":"item","p":["Added NightVisionTorchflowerStew, BlindnessEyeblossomStew and NauseaStew suspicious stew types.","Added Resin item.","Added Crossbow item.","Added new (Stack).WithItem method to return an identical Stack with a different world.Item type.","Removed armour trims from Stack. To replace it, a Trim field has been added to Helmet, Chestplate, Leggings and Boots.","Changed maximum stack count of written books to 16.","Fixed bottles not being filled up with water when using them on a water source.","Removed DisplayName function."]},{"i":"itemcreative","l":"item/creative","p":["Fixed several items, such as banners and skulls, not showing up correctly in the creative inventory."]},{"i":"itemenchantment","l":"item/enchantment","p":["Changed enchantment types to variables. Sharpness{} is now Sharpness."]},{"l":"player","p":["Added HandleHeldSlotChange method to Handler, called when a player changes held slot. Additionally, a new(*Player).SetHeldSlot method was added.","Added HandleItemRelease method to Handler, called when a player releases an item such as a bow.","Added a new Messaget method to send a chat.Translation.","Data has been refactored in a more easily usable Config that can be used to create a player entity.","Attack immunity was changed to match vanilla. If (*Player).Hurt is called twice in the same tick, damage is still dealt if the second damage was higher than the first. Additionally, attack immunity now extends to all damage sources.","Saturation and food tick are now reset when (Handler).HandleFoodLoss is cancelled.","Releasable items such as bows no longer fire when switching held slots.","Fixed an issue where (*Player).HideEntity would leak entities.","Fixed (*Player).ReleaseItem not using items in the left hand as projectiles.","Fixed no block break particles/progress/arm swinging happening. Block cracking is now fully server-side.","Fixed a bug where colliding with a wall while falling could negate or trigger fall damage.","Stopped block resending when placing blocks close to the player, leading to reduced synchronisation issues."]},{"i":"playerchat","l":"player/chat","p":["Added a new Translate function used for (client-side) translations. Passing a TranslationString to Translate returns a Translation. Translation s may require arguments that can be passed in (Translation).F.","Added a new Translator interface for Subscriber s that can translate messages.","Added a new (*Chat).Messaget function to broadcast a translation that is localised for each subscriber that also implements Translator."]},{"i":"playerdialogue","l":"player/dialogue","p":["dialogue is a new package for sending entity dialogues to players. These are UI windows with text, buttons and an entity. The entity shown may be rotated. Dialogues may be created using New and can be sent to players using(*player.Player).SendDialogue."]},{"l":"server","p":["(*Server).Accept now returns an iter.Seq of joining players that can be iterated over.","Disconnecting players returned by (*Server).Accept no longer deadlocks the server.","Added StatusProvider field to Config for custom MOTD/player count values."]},{"l":"world","p":["Added a new (*World).Exec method that is used to open a transaction on the world. Many methods on *World, such as (*World).Block, have now been moved to (*Tx).Block instead. More information may be found at the wiki page for world transactions.","Added a new *EntityHandle type that uniquely identifies an entity. Entity implementations are only valid in the context of a transaction now.","Added a EntityAnimation type that allows for complex entity animations to be played.","Added a new HandleLeavesDecay method to Handler, called when leaves blocks decay.","Added a new SaveInterval field to Config that specifies how often worlds should auto-save.","Scheduled block updates are now tied to the specific block type that they are called for.","Scheduled block updates are now saved and loaded to/from disk.","Entities are now stored on disk using the new format.","Worlds with a void generator no longer panic when being loaded.","Fixed panic when closing a world immediately after opening it."]},{"i":"worldbiome","l":"world/biome","p":["Added PaleGarden biome."]},{"i":"worldsound","l":"world/sound","p":["Added CrossbowLoad and CrossbowShoot."]}],[{"i":"v0920","l":"v0.9.20","p":["Released 4th December 2024.","This version includes protocol support for 1.21.50."]}],[{"i":"v0919","l":"v0.9.19","p":["Released 23rd November 2024.","This version includes protocol support for 1.21.40 as well as a number of bug fixes and new features."]},{"l":"Bug Fixes","p":["Fixed incorrect interface definition causing Bows enchanted with Punch not to work correctly.","Fixed a nil pointer that could occur with Ender Chests.","Fixed incorrect calculations with the Efficiency enchantment.","Players will no longer fall through blocks when being teleported.","Fixed various incorrect item identifiers being returns by some blocks.","Updated various hardness and blast resistance values for blocks.","Fletching Tables no longer cause a panic when being picked.","Fixed cost of creating multiple banners in a Loom.","Enchanted Golden Apples were updated to now provide Regeneration II to match vanilla.","Calculations for damage caused by TNT explosions have been fixed.","Spectators can no longer pick up arrows"]},{"l":"Changes"},{"l":"block","p":["The Mangrove and Cherry functions have been renamed to MangroveWood and CherryWood respectively.","The new Oxidizable interface has been added for blocks that can oxidise.","Many new blocks have been implemented, including BrewingStand Copper, CopperDoor, CopperGrate, CopperTrapdoor, PolishedTuff and TuffBricks."]},{"i":"blockcube","l":"block/cube","p":["Three new methods have been introduced to BBox: Corners, Mul and Volume."]},{"l":"recipe","p":["The new Potion and PotionContainerChange` structs have been introduced to allow for potion recipes to be registered.","The Perform and ValidBrewingReagent functions have been introduced for working with potion recipes."]},{"l":"player","p":["The entity.SplashableEntity interface has been implemented on the Player struct to allow for water bottles to be thrown at players to extinguish them when on fire."]},{"l":"session","p":["Three new methods have been introduced to the Controllable interface, StartCrawling, Crawling and StopCrawling."]},{"i":"worldsound","l":"world/sound","p":["The new PotionBrewed struct can be used to play the sound of a potion being brewed.","The new WaxRemoved struct can be used to play the sound of wax being removed from a Copper block.","The new CopperScraped struct can be used to play the sound of a Copper block being scraped to reduce oxidation."]}]]